@namespace StockTradePro.BlazorUI.Components.Shared

@if (IsVisible)
{
    @if (IsOverlay)
    {
        <!-- Full Screen Overlay -->
        <div class="loading-overlay @OverlayClass" @onclick:stopPropagation="true">
            <div class="loading-container">
                @RenderSpinner()
            </div>
        </div>
    }
    else if (IsInline)
    {
        <!-- Inline Spinner -->
        <div class="loading-inline @InlineClass">
            @RenderSpinner()
        </div>
    }
    else
    {
        <!-- Default Container -->
        <div class="loading-wrapper @WrapperClass">
            @RenderSpinner()
        </div>
    }
}

@code {
    [Parameter] public bool IsVisible { get; set; } = true;
    [Parameter] public LoadingType Type { get; set; } = LoadingType.Spinner;
    [Parameter] public LoadingSize Size { get; set; } = LoadingSize.Medium;
    [Parameter] public string Color { get; set; } = "primary";
    [Parameter] public string? Message { get; set; }
    [Parameter] public bool ShowMessage { get; set; } = true;
    [Parameter] public bool IsOverlay { get; set; } = false;
    [Parameter] public bool IsInline { get; set; } = false;
    [Parameter] public string AdditionalClasses { get; set; } = "";
    [Parameter] public bool CenterContent { get; set; } = true;

    // Custom styling parameters
    [Parameter] public string? CustomColor { get; set; }
    [Parameter] public string? BackgroundColor { get; set; } = "rgba(255,255,255,0.9)";
    [Parameter] public int? Duration { get; set; } // Animation duration in milliseconds

    private string WrapperClass =>
        $"loading-wrapper-{Size.ToString().ToLower()} " +
        $"{(CenterContent ? "text-center " : "")}" +
        $"{AdditionalClasses}";

    private string OverlayClass =>
        $"loading-overlay-{Size.ToString().ToLower()} " +
        $"{AdditionalClasses}";

    private string InlineClass =>
        $"loading-inline-{Size.ToString().ToLower()} " +
        $"{AdditionalClasses}";

    private RenderFragment RenderSpinner() => Type switch
    {
        LoadingType.Spinner => RenderBootstrapSpinner(),
        LoadingType.Dots => RenderDotsSpinner(),
        LoadingType.Pulse => RenderPulseSpinner(),
        LoadingType.Bars => RenderBarsSpinner(),
        LoadingType.Custom => RenderCustomSpinner(),
        _ => RenderBootstrapSpinner()
    };

    private RenderFragment RenderBootstrapSpinner() => __builder =>
    {
        <div class="spinner-container @GetSpinnerContainerClass()">
            <div class="spinner-border text-@Color @GetSpinnerSizeClass()"
                 role="status"
                 style="@GetCustomStyles()">
                <span class="visually-hidden">Loading...</span>
            </div>
            @if (ShowMessage && !string.IsNullOrEmpty(Message))
            {
                <div class="loading-message @GetMessageSizeClass()">@Message</div>
            }
        </div>
    };

    private RenderFragment RenderDotsSpinner() => __builder =>
    {
        <div class="dots-spinner-container @GetSpinnerContainerClass()">
            <div class="dots-spinner @GetDotsSpinnerSizeClass()" style="@GetCustomStyles()">
                <div class="dot dot-1 bg-@Color"></div>
                <div class="dot dot-2 bg-@Color"></div>
                <div class="dot dot-3 bg-@Color"></div>
            </div>
            @if (ShowMessage && !string.IsNullOrEmpty(Message))
            {
                <div class="loading-message @GetMessageSizeClass()">@Message</div>
            }
        </div>
    };

    private RenderFragment RenderPulseSpinner() => __builder =>
    {
        <div class="pulse-spinner-container @GetSpinnerContainerClass()">
            <div class="pulse-spinner @GetPulseSpinnerSizeClass()" style="@GetCustomStyles()">
                <div class="pulse-circle bg-@Color"></div>
                <div class="pulse-circle bg-@Color"></div>
            </div>
            @if (ShowMessage && !string.IsNullOrEmpty(Message))
            {
                <div class="loading-message @GetMessageSizeClass()">@Message</div>
            }
        </div>
    };

    private RenderFragment RenderBarsSpinner() => __builder =>
    {
        <div class="bars-spinner-container @GetSpinnerContainerClass()">
            <div class="bars-spinner @GetBarsSpinnerSizeClass()" style="@GetCustomStyles()">
                @for (int i = 1; i <= 5; i++)
                {
                    <div class="bar bar-@i bg-@Color"></div>
                }
            </div>
            @if (ShowMessage && !string.IsNullOrEmpty(Message))
            {
                <div class="loading-message @GetMessageSizeClass()">@Message</div>
            }
        </div>
    };

    private RenderFragment RenderCustomSpinner() => __builder =>
    {
        <div class="custom-spinner-container @GetSpinnerContainerClass()">
            <div class="custom-spinner @GetCustomSpinnerSizeClass()" style="@GetCustomStyles()">
                <div class="custom-spinner-inner">
                    <i class="fas fa-chart-line spinner-icon text-@Color"></i>
                </div>
            </div>
            @if (ShowMessage && !string.IsNullOrEmpty(Message))
            {
                <div class="loading-message @GetMessageSizeClass()">@Message</div>
            }
        </div>
    };

    private string GetSpinnerContainerClass() => Size switch
    {
        LoadingSize.Small => "spinner-container-sm",
        LoadingSize.Large => "spinner-container-lg",
        LoadingSize.ExtraLarge => "spinner-container-xl",
        _ => "spinner-container-md"
    };

    private string GetSpinnerSizeClass() => Size switch
    {
        LoadingSize.Small => "spinner-border-sm",
        LoadingSize.Large => "spinner-border-lg",
        LoadingSize.ExtraLarge => "spinner-border-xl",
        _ => ""
    };

    private string GetMessageSizeClass() => Size switch
    {
        LoadingSize.Small => "loading-message-sm",
        LoadingSize.Large => "loading-message-lg",
        LoadingSize.ExtraLarge => "loading-message-xl",
        _ => "loading-message-md"
    };

    private string GetDotsSpinnerSizeClass() => Size switch
    {
        LoadingSize.Small => "dots-spinner-sm",
        LoadingSize.Large => "dots-spinner-lg",
        LoadingSize.ExtraLarge => "dots-spinner-xl",
        _ => "dots-spinner-md"
    };

    private string GetPulseSpinnerSizeClass() => Size switch
    {
        LoadingSize.Small => "pulse-spinner-sm",
        LoadingSize.Large => "pulse-spinner-lg",
        LoadingSize.ExtraLarge => "pulse-spinner-xl",
        _ => "pulse-spinner-md"
    };

    private string GetBarsSpinnerSizeClass() => Size switch
    {
        LoadingSize.Small => "bars-spinner-sm",
        LoadingSize.Large => "bars-spinner-lg",
        LoadingSize.ExtraLarge => "bars-spinner-xl",
        _ => "bars-spinner-md"
    };

    private string GetCustomSpinnerSizeClass() => Size switch
    {
        LoadingSize.Small => "custom-spinner-sm",
        LoadingSize.Large => "custom-spinner-lg",
        LoadingSize.ExtraLarge => "custom-spinner-xl",
        _ => "custom-spinner-md"
    };

    private string GetCustomStyles()
    {
        var styles = new List<string>();

        if (!string.IsNullOrEmpty(CustomColor))
            styles.Add($"color: {CustomColor}");

        if (Duration.HasValue)
            styles.Add($"animation-duration: {Duration.Value}ms");

        return string.Join("; ", styles);
    }

    public enum LoadingType
    {
        Spinner,    // Bootstrap spinner
        Dots,       // Three bouncing dots
        Pulse,      // Pulsing circles
        Bars,       // Rising bars
        Custom      // Custom StockTradePro themed spinner
    }

    public enum LoadingSize
    {
        Small,
        Medium,
        Large,
        ExtraLarge
    }
}

<style>
    /* === BASE STYLES === */
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: @BackgroundColor;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
        backdrop-filter: blur(2px);
    }

    .loading-wrapper {
        padding: 2rem;
        min-height: 200px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .loading-inline {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1rem;
    }

    /* === SPINNER CONTAINERS === */
    .spinner-container,
    .dots-spinner-container,
    .pulse-spinner-container,
    .bars-spinner-container,
    .custom-spinner-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1rem;
    }

    /* === BOOTSTRAP SPINNER SIZES === */
    .spinner-border-lg {
        width: 3rem;
        height: 3rem;
        border-width: 0.3em;
    }

    .spinner-border-xl {
        width: 4rem;
        height: 4rem;
        border-width: 0.4em;
    }

    /* === LOADING MESSAGES === */
    .loading-message {
        color: #6c757d;
        font-weight: 500;
        text-align: center;
        line-height: 1.4;
    }

    .loading-message-sm {
        font-size: 0.75rem;
    }

    .loading-message-md {
        font-size: 0.875rem;
    }

    .loading-message-lg {
        font-size: 1rem;
    }

    .loading-message-xl {
        font-size: 1.125rem;
    }

    /* === DOTS SPINNER === */
    .dots-spinner {
        display: flex;
        gap: 0.25rem;
        align-items: center;
    }

        .dots-spinner .dot {
            border-radius: 50%;
            animation: dots-bounce 1.4s ease-in-out infinite both;
        }

        .dots-spinner .dot-1 {
            animation-delay: -0.32s;
        }

        .dots-spinner .dot-2 {
            animation-delay: -0.16s;
        }

        .dots-spinner .dot-3 {
            animation-delay: 0s;
        }

    .dots-spinner-sm .dot {
        width: 0.5rem;
        height: 0.5rem;
    }

    .dots-spinner-md .dot {
        width: 0.75rem;
        height: 0.75rem;
    }

    .dots-spinner-lg .dot {
        width: 1rem;
        height: 1rem;
    }

    .dots-spinner-xl .dot {
        width: 1.25rem;
        height: 1.25rem;
    }

    @@keyframes dots-bounce {
        0%, 80%, 100%

    {
        transform: scale(0);
    }

    40% {
        transform: scale(1);
    }

    }

    /* === PULSE SPINNER === */
    .pulse-spinner {
        position: relative;
        display: inline-block;
    }

        .pulse-spinner .pulse-circle {
            position: absolute;
            border-radius: 50%;
            opacity: 1;
            top: 0;
            left: 0;
            animation: pulse-scale 2s infinite;
        }

            .pulse-spinner .pulse-circle:nth-child(2) {
                animation-delay: -1s;
            }

    .pulse-spinner-sm {
        width: 2rem;
        height: 2rem;
    }

        .pulse-spinner-sm .pulse-circle {
            width: 2rem;
            height: 2rem;
        }

    .pulse-spinner-md {
        width: 2.5rem;
        height: 2.5rem;
    }

        .pulse-spinner-md .pulse-circle {
            width: 2.5rem;
            height: 2.5rem;
        }

    .pulse-spinner-lg {
        width: 3rem;
        height: 3rem;
    }

        .pulse-spinner-lg .pulse-circle {
            width: 3rem;
            height: 3rem;
        }

    .pulse-spinner-xl {
        width: 4rem;
        height: 4rem;
    }

        .pulse-spinner-xl .pulse-circle {
            width: 4rem;
            height: 4rem;
        }

    @@keyframes pulse-scale {
        0%

    {
        transform: scale(0);
        opacity: 1;
    }

    100% {
        transform: scale(1);
        opacity: 0;
    }

    }

    /* === BARS SPINNER === */
    .bars-spinner {
        display: flex;
        gap: 0.125rem;
        align-items: flex-end;
    }

        .bars-spinner .bar {
            animation: bars-scale 1.2s infinite ease-in-out;
        }

        .bars-spinner .bar-1 {
            animation-delay: -1.2s;
        }

        .bars-spinner .bar-2 {
            animation-delay: -1.1s;
        }

        .bars-spinner .bar-3 {
            animation-delay: -1.0s;
        }

        .bars-spinner .bar-4 {
            animation-delay: -0.9s;
        }

        .bars-spinner .bar-5 {
            animation-delay: -0.8s;
        }

    .bars-spinner-sm .bar {
        width: 0.125rem;
        height: 1rem;
    }

    .bars-spinner-md .bar {
        width: 0.25rem;
        height: 1.5rem;
    }

    .bars-spinner-lg .bar {
        width: 0.375rem;
        height: 2rem;
    }

    .bars-spinner-xl .bar {
        width: 0.5rem;
        height: 2.5rem;
    }

    @@keyframes bars-scale {
        0%, 40%, 100%

    {
        transform: scaleY(0.4);
    }

    20% {
        transform: scaleY(1.0);
    }

    }

    /* === CUSTOM SPINNER === */
    .custom-spinner {
        position: relative;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        animation: custom-rotate 2s linear infinite;
    }

    .custom-spinner-inner {
        background: white;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .custom-spinner-sm {
        width: 2rem;
        height: 2rem;
    }

        .custom-spinner-sm .custom-spinner-inner {
            width: 1.5rem;
            height: 1.5rem;
        }

        .custom-spinner-sm .spinner-icon {
            font-size: 0.75rem;
        }

    .custom-spinner-md {
        width: 2.5rem;
        height: 2.5rem;
    }

        .custom-spinner-md .custom-spinner-inner {
            width: 2rem;
            height: 2rem;
        }

        .custom-spinner-md .spinner-icon {
            font-size: 1rem;
        }

    .custom-spinner-lg {
        width: 3rem;
        height: 3rem;
    }

        .custom-spinner-lg .custom-spinner-inner {
            width: 2.5rem;
            height: 2.5rem;
        }

        .custom-spinner-lg .spinner-icon {
            font-size: 1.25rem;
        }

    .custom-spinner-xl {
        width: 4rem;
        height: 4rem;
    }

        .custom-spinner-xl .custom-spinner-inner {
            width: 3.5rem;
            height: 3.5rem;
        }

        .custom-spinner-xl .spinner-icon {
            font-size: 1.5rem;
        }

    @@keyframes custom-rotate {
        from

    {
        transform: rotate(0deg);
    }

    to {
        transform: rotate(360deg);
    }

    }

    /* === SIZE VARIANTS === */
    .loading-wrapper-sm {
        min-height: 100px;
        padding: 1rem;
    }

    .loading-wrapper-lg {
        min-height: 300px;
        padding: 3rem;
    }

    .loading-wrapper-xl {
        min-height: 400px;
        padding: 4rem;
    }

    .loading-overlay-sm .loading-container {
        gap: 0.5rem;
    }

    .loading-overlay-lg .loading-container {
        gap: 1.5rem;
    }

    .loading-overlay-xl .loading-container {
        gap: 2rem;
    }

    /* === RESPONSIVE === */
    @@media (max-width: 576px) {
        .loading-overlay

    {
        backdrop-filter: blur(1px);
    }

    .loading-wrapper {
        padding: 1rem;
        min-height: 150px;
    }

    .loading-message {
        font-size: 0.8rem;
    }

    }

    /* === ACCESSIBILITY === */
    @@media (prefers-reduced-motion: reduce) {
        .spinner-border, .dots-spinner .dot, .pulse-spinner .pulse-circle, .bars-spinner .bar, .custom-spinner

    {
        animation-duration: 3s;
    }

    }
</style>