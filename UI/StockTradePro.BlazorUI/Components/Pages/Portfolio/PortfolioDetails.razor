@page "/portfolios/{id:int}"
@using StockTradePro.BlazorUI.Models.Portfolio
@using StockTradePro.BlazorUI.Models.Common
@using StockTradePro.BlazorUI.Services
@inject IPortfolioService PortfolioService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>@(portfolio?.Name ?? "Portfolio Details") - StockTradePro</PageTitle>

@if (isLoading)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading portfolio...</span>
        </div>
        <p class="mt-2 text-muted">Loading portfolio details...</p>
    </div>
}
else if (portfolio == null)
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-body text-center py-5">
                        <i class="fas fa-exclamation-triangle fa-3x text-warning mb-3"></i>
                        <h4>Portfolio Not Found</h4>
                        <p class="text-muted mb-3">The portfolio you're looking for doesn't exist or you don't have access to it.</p>
                        <a href="/portfolios" class="btn btn-primary">
                            <i class="fas fa-arrow-left me-2"></i>Back to Portfolios
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="container-fluid">
        <!-- Header Section -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-start">
                    <div>
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb mb-2">
                                <li class="breadcrumb-item">
                                    <a href="/portfolios" class="text-decoration-none">
                                        <i class="fas fa-briefcase me-1"></i>Portfolios
                                    </a>
                                </li>
                                <li class="breadcrumb-item active" aria-current="page">@portfolio.Name</li>
                            </ol>
                        </nav>
                        <div class="d-flex align-items-center mb-2">
                            <h1 class="h2 mb-0 me-3">@portfolio.Name</h1>
                            @if (portfolio.IsPublic)
                            {
                                <span class="badge bg-info">
                                    <i class="fas fa-globe me-1"></i>Public
                                </span>
                            }
                            else
                            {
                                <span class="badge bg-secondary">
                                    <i class="fas fa-lock me-1"></i>Private
                                </span>
                            }
                        </div>
                        @if (!string.IsNullOrEmpty(portfolio.Description))
                        {
                            <p class="text-muted mb-0">@portfolio.Description</p>
                        }
                        <small class="text-muted">
                            Created @portfolio.CreatedAt.ToString("MMM dd, yyyy") •
                            Last updated @portfolio.UpdatedAt.ToString("MMM dd, yyyy HH:mm")
                        </small>
                    </div>
                    <div class="d-flex gap-2">
                        <button type="button" class="btn btn-outline-secondary" @onclick="RefreshPortfolio">
                            <i class="fas fa-sync-alt me-1"></i>Refresh
                        </button>
                        <button type="button" class="btn btn-outline-primary" @onclick="() => ShowAddTransactionModal()">
                            <i class="fas fa-plus me-1"></i>Add Transaction
                        </button>
                        <div class="btn-group" role="group">
                            <button type="button" class="btn btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown">
                                <i class="fas fa-cog me-1"></i>Actions
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li>
                                    <button class="dropdown-item" @onclick="() => EditPortfolio()">
                                        <i class="fas fa-edit me-2"></i>Edit Portfolio
                                    </button>
                                </li>
                                <li>
                                    <button class="dropdown-item" @onclick="() => RecalculatePortfolio()">
                                        <i class="fas fa-calculator me-2"></i>Recalculate
                                    </button>
                                </li>
                                <li><hr class="dropdown-divider"></li>
                                <li>
                                    <button class="dropdown-item text-danger" @onclick="() => DeletePortfolio()">
                                        <i class="fas fa-trash me-2"></i>Delete Portfolio
                                    </button>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Performance Summary Cards -->
        <div class="row mb-4">
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card bg-primary text-white h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h4 class="card-title">@portfolio.CurrentValue.ToString("C0")</h4>
                                <p class="card-text">Current Value</p>
                            </div>
                            <div class="align-self-center">
                                <i class="fas fa-dollar-sign fa-2x opacity-75"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card @(portfolio.TotalGainLoss >= 0 ? "bg-success" : "bg-danger") text-white h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h4 class="card-title">@portfolio.TotalGainLoss.ToString("C0")</h4>
                                <p class="card-text">Total Gain/Loss</p>
                                <small>@portfolio.TotalGainLossPercent.ToString("F2")%</small>
                            </div>
                            <div class="align-self-center">
                                <i class="fas @(portfolio.TotalGainLoss >= 0 ? "fa-arrow-up" : "fa-arrow-down") fa-2x opacity-75"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card bg-info text-white h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h4 class="card-title">@portfolio.TotalHoldings</h4>
                                <p class="card-text">Holdings</p>
                            </div>
                            <div class="align-self-center">
                                <i class="fas fa-chart-pie fa-2x opacity-75"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card bg-secondary text-white h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h4 class="card-title">@portfolio.InitialValue.ToString("C0")</h4>
                                <p class="card-text">Initial Investment</p>
                            </div>
                            <div class="align-self-center">
                                <i class="fas fa-seedling fa-2x opacity-75"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="row">
            <!-- Holdings Section -->
            <div class="col-lg-8">
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-chart-pie me-2"></i>Holdings
                        </h5>
                        <div>
                            <button class="btn btn-sm btn-outline-secondary me-2" @onclick="() => SetHoldingsView(HoldingsViewType.Table)">
                                <i class="fas @(holdingsView == HoldingsViewType.Table ? "fa-table" : "fa-table") @(holdingsView == HoldingsViewType.Table ? "text-primary" : "")"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => SetHoldingsView(HoldingsViewType.Chart)">
                                <i class="fas @(holdingsView == HoldingsViewType.Chart ? "fa-chart-pie" : "fa-chart-pie") @(holdingsView == HoldingsViewType.Chart ? "text-primary" : "")"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        @if (portfolio.Holdings?.Any() != true)
                        {
                            <div class="text-center py-4">
                                <i class="fas fa-chart-line fa-3x text-muted mb-3"></i>
                                <h5>No Holdings Yet</h5>
                                <p class="text-muted mb-3">Start building your portfolio by adding your first transaction.</p>
                                <button class="btn btn-primary" @onclick="() => ShowAddTransactionModal()">
                                    <i class="fas fa-plus me-2"></i>Add First Transaction
                                </button>
                            </div>
                        }
                        else if (holdingsView == HoldingsViewType.Table)
                        {
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Symbol</th>
                                            <th>Quantity</th>
                                            <th>Avg Cost</th>
                                            <th>Current Price</th>
                                            <th>Market Value</th>
                                            <th>Gain/Loss</th>
                                            <th>% Portfolio</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var holding in portfolio.Holdings.OrderByDescending(h => h.CurrentValue))
                                        {
                                            <tr class="holding-row" @onclick="() => ViewStock(holding.Symbol)">
                                                <td>
                                                    <div>
                                                        <strong>@holding.Symbol</strong>
                                                        <div class="small text-muted">@holding.CompanyName</div>
                                                    </div>
                                                </td>
                                                <td>@holding.Quantity.ToString("N0")</td>
                                                <td>@holding.AverageCost.ToString("C2")</td>
                                                <td>
                                                    <div>
                                                        <strong>@holding.CurrentPrice.ToString("C2")</strong>
                                                        <div class="small @(holding.DayChange >= 0 ? "text-success" : "text-danger")">
                                                            @holding.DayChange.ToString("+0.00;-0.00;0.00") (@holding.DayChangePercent.ToString("F2")%)
                                                        </div>
                                                    </div>
                                                </td>
                                                <td>@holding.CurrentValue.ToString("C2")</td>
                                                <td class="@(holding.UnrealizedGainLoss >= 0 ? "text-success" : "text-danger")">
                                                    <div>
                                                        <strong>@holding.UnrealizedGainLoss.ToString("+C0;-C0;C0")</strong>
                                                        <div class="small">@holding.UnrealizedGainLossPercent.ToString("F2")%</div>
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="d-flex align-items-center">
                                                        <div class="progress me-2" style="width: 60px; height: 6px;">
                                                            <div class="progress-bar bg-primary"
                                                                 style="width: @Math.Min(holding.PortfolioPercent, 100)%"></div>
                                                        </div>
                                                        <small>@holding.PortfolioPercent.ToString("F1")%</small>
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="btn-group btn-group-sm" role="group" @onclick:stopPropagation="true">
                                                        <button type="button" class="btn btn-outline-success btn-sm"
                                                                @onclick="() => BuyMore(holding.Symbol)" title="Buy More">
                                                            <i class="fas fa-plus"></i>
                                                        </button>
                                                        <button type="button" class="btn btn-outline-danger btn-sm"
                                                                @onclick="() => SellHolding(holding.Symbol)" title="Sell">
                                                            <i class="fas fa-minus"></i>
                                                        </button>
                                                        <button type="button" class="btn btn-outline-info btn-sm"
                                                                @onclick="() => ViewTransactions(holding.Symbol)" title="View Transactions">
                                                            <i class="fas fa-list"></i>
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <!-- Chart View Placeholder -->
                            <div class="text-center py-5">
                                <i class="fas fa-chart-pie fa-4x text-muted mb-3"></i>
                                <h5>Portfolio Allocation Chart</h5>
                                <p class="text-muted">Chart visualization coming soon...</p>
                                <div class="row">
                                    @foreach (var holding in portfolio.Holdings.OrderByDescending(h => h.PortfolioPercent).Take(5))
                                    {
                                        <div class="col-md-4 mb-2">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <span class="fw-bold">@holding.Symbol</span>
                                                <span class="badge bg-primary">@holding.PortfolioPercent.ToString("F1")%</span>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Recent Transactions -->
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-exchange-alt me-2"></i>Recent Transactions
                        </h5>
                        <a href="/portfolios/@Id/transactions" class="btn btn-sm btn-outline-primary">
                            View All
                        </a>
                    </div>
                    <div class="card-body">
                        @if (recentTransactions?.Any() != true)
                        {
                            <div class="text-center py-3">
                                <i class="fas fa-receipt fa-2x text-muted mb-2"></i>
                                <p class="text-muted mb-0">No transactions yet</p>
                            </div>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>Date</th>
                                            <th>Symbol</th>
                                            <th>Type</th>
                                            <th>Quantity</th>
                                            <th>Price</th>
                                            <th>Total</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var transaction in recentTransactions.Take(5))
                                        {
                                            <tr>
                                                <td>@transaction.TransactionDate.ToString("MM/dd/yyyy")</td>
                                                <td>
                                                    <strong>@transaction.Symbol</strong>
                                                </td>
                                                <td>
                                                    <span class="badge @(transaction.Type == "BUY" ? "bg-success" : "bg-danger")">
                                                        @transaction.Type
                                                    </span>
                                                </td>
                                                <td>@transaction.Quantity.ToString("N0")</td>
                                                <td>@transaction.Price.ToString("C2")</td>
                                                <td>@transaction.TotalAmount.ToString("C2")</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Sidebar -->
            <div class="col-lg-4">
                <!-- Portfolio Performance -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h6 class="card-title mb-0">
                            <i class="fas fa-chart-line me-2"></i>Performance Summary
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="performance-metric mb-3">
                            <div class="d-flex justify-content-between align-items-center mb-1">
                                <span class="text-muted">Total Return</span>
                                <span class="fw-bold @(portfolio.TotalGainLoss >= 0 ? "text-success" : "text-danger")">
                                    @portfolio.TotalGainLossPercent.ToString("F2")%
                                </span>
                            </div>
                            <div class="progress" style="height: 6px;">
                                <div class="progress-bar @(portfolio.TotalGainLoss >= 0 ? "bg-success" : "bg-danger")"
                                     style="width: @Math.Min(Math.Abs(portfolio.TotalGainLossPercent), 100)%"></div>
                            </div>
                        </div>

                        <div class="row text-center">
                            <div class="col-6">
                                <div class="border-end">
                                    <div class="h6 mb-1">@portfolio.TotalHoldings</div>
                                    <small class="text-muted">Holdings</small>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="h6 mb-1">@portfolio.TotalTransactions</div>
                                <small class="text-muted">Transactions</small>
                            </div>
                        </div>

                        <hr class="my-3">

                        @if (portfolio.LastCalculatedAt.HasValue)
                        {
                            <div class="text-center">
                                <small class="text-muted">
                                    Last calculated: @portfolio.LastCalculatedAt.Value.ToString("MMM dd, HH:mm")
                                </small>
                            </div>
                        }
                    </div>
                </div>

                <!-- Quick Actions -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h6 class="card-title mb-0">
                            <i class="fas fa-bolt me-2"></i>Quick Actions
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-2">
                            <button class="btn btn-success btn-sm" @onclick="() => ShowAddTransactionModal()">
                                <i class="fas fa-plus me-2"></i>Add Transaction
                            </button>
                            <button class="btn btn-outline-primary btn-sm" @onclick="() => RecalculatePortfolio()">
                                <i class="fas fa-sync-alt me-2"></i>Refresh Values
                            </button>
                            <button class="btn btn-outline-info btn-sm" @onclick="() => ViewAllTransactions()">
                                <i class="fas fa-list me-2"></i>View All Transactions
                            </button>
                            <button class="btn btn-outline-secondary btn-sm" @onclick="() => ExportPortfolio()">
                                <i class="fas fa-download me-2"></i>Export Data
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Portfolio Type & Settings -->
                <div class="card">
                    <div class="card-header">
                        <h6 class="card-title mb-0">
                            <i class="fas fa-cog me-2"></i>Portfolio Settings
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label class="form-label text-muted">Type</label>
                            <div>@portfolio.Type</div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label text-muted">Visibility</label>
                            <div>
                                @if (portfolio.IsPublic)
                                {
                                    <span class="badge bg-info">
                                        <i class="fas fa-globe me-1"></i>Public
                                    </span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">
                                        <i class="fas fa-lock me-1"></i>Private
                                    </span>
                                }
                            </div>
                        </div>
                        <div class="mb-0">
                            <label class="form-label text-muted">Status</label>
                            <div>
                                @if (portfolio.IsActive)
                                {
                                    <span class="badge bg-success">Active</span>
                                }
                                else
                                {
                                    <span class="badge bg-warning">Inactive</span>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .holding-row {
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

        .holding-row:hover {
            background-color: #f8f9fa;
        }

    .performance-metric .progress {
        background-color: #e9ecef;
    }

    .btn-group-sm .btn {
        padding: 0.25rem 0.4rem;
    }

    .breadcrumb {
        background: none;
        padding: 0;
        margin: 0;
    }

    .breadcrumb-item + .breadcrumb-item::before {
        content: "›";
        color: #6c757d;
    }

    .card-title {
        font-weight: 600;
    }

    .table th {
        border-top: none;
        font-weight: 600;
        white-space: nowrap;
    }

    .progress {
        border-radius: 10px;
    }

    .performance-metric {
        position: relative;
    }
</style>

@code {
    [Parameter] public int Id { get; set; }

    private PortfolioDto? portfolio;
    private List<TransactionDto>? recentTransactions;
    private bool isLoading = true;
    private HoldingsViewType holdingsView = HoldingsViewType.Table;

    private enum HoldingsViewType
    {
        Table,
        Chart
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadPortfolioData();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id > 0)
        {
            await LoadPortfolioData();
        }
    }

    private async Task LoadPortfolioData()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Load portfolio details
            portfolio = await PortfolioService.GetPortfolioAsync(Id);

            if (portfolio != null)
            {
                // Load recent transactions
                var transactionResult = await PortfolioService.GetPortfolioTransactionsAsync(Id, 1, 10);
                recentTransactions = transactionResult.Data;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading portfolio data: {ex.Message}");
            // You might want to show an error message to the user
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshPortfolio()
    {
        await RecalculatePortfolio();
        await LoadPortfolioData();
    }

    private async Task RecalculatePortfolio()
    {
        try
        {
            var success = await PortfolioService.RecalculatePortfolioAsync(Id);
            if (success)
            {
                // Show success message or toast
                await JS.InvokeVoidAsync("showToast", "Success", "Portfolio values updated successfully.", "success");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error recalculating portfolio: {ex.Message}");
            await JS.InvokeVoidAsync("showToast", "Error", "Failed to update portfolio values.", "error");
        }
    }

    private void SetHoldingsView(HoldingsViewType viewType)
    {
        holdingsView = viewType;
    }

    private void ShowAddTransactionModal()
    {
        Navigation.NavigateTo($"/portfolios/{Id}/transactions/add");
    }

    private void EditPortfolio()
    {
        Navigation.NavigateTo($"/portfolios/{Id}/edit");
    }

    private async Task DeletePortfolio()
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this portfolio? This action cannot be undone.");
        if (confirmed)
        {
            try
            {
                var success = await PortfolioService.DeletePortfolioAsync(Id);
                if (success)
                {
                    await JS.InvokeVoidAsync("showToast", "Success", "Portfolio deleted successfully.", "success");
                    Navigation.NavigateTo("/portfolios");
                }
                else
                {
                    await JS.InvokeVoidAsync("showToast", "Error", "Failed to delete portfolio.", "error");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting portfolio: {ex.Message}");
                await JS.InvokeVoidAsync("showToast", "Error", "Failed to delete portfolio.", "error");
            }
        }
    }

    private void ViewStock(string symbol)
    {
        Navigation.NavigateTo($"/stocks/{symbol}");
    }

    private void BuyMore(string symbol)
    {
        Navigation.NavigateTo($"/portfolios/{Id}/transactions/add?symbol={symbol}&type=BUY");
    }

    private void SellHolding(string symbol)
    {
        Navigation.NavigateTo($"/portfolios/{Id}/transactions/add?symbol={symbol}&type=SELL");
    }

    private void ViewTransactions(string symbol)
    {
        Navigation.NavigateTo($"/portfolios/{Id}/transactions?symbol={symbol}");
    }

    private void ViewAllTransactions()
    {
        Navigation.NavigateTo($"/portfolios/{Id}/transactions");
    }

    private async Task ExportPortfolio()
    {
        // Placeholder for export functionality
        await JS.InvokeVoidAsync("showToast", "Info", "Export functionality coming soon.", "info");
    }
}