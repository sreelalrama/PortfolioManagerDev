@page "/portfolios/{PortfolioId:int}/transactions"
@using StockTradePro.BlazorUI.Models.Portfolio
@using StockTradePro.BlazorUI.Services
@inject IPortfolioService PortfolioService
@inject NavigationManager Navigation

<PageTitle>Transaction History - StockTradePro</PageTitle>

<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h2 mb-1">
                        <i class="fas fa-exchange-alt me-2 text-primary"></i>Transaction History
                    </h1>
                    <p class="text-muted mb-0">@portfolioName</p>
                </div>
                <div>
                    <button type="button" class="btn btn-outline-secondary me-2" @onclick="RefreshData">
                        <i class="fas fa-sync-alt me-1"></i>Refresh
                    </button>
                    <button type="button" class="btn btn-primary">
                        <i class="fas fa-plus me-1"></i>Add Transaction
                    </button>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading transactions...</span>
            </div>
            <p class="mt-2 text-muted">Loading transaction history...</p>
        </div>
    }
    else if (transactions?.Any() != true)
    {
        <div class="card">
            <div class="card-body text-center py-5">
                <i class="fas fa-exchange-alt fa-4x text-muted mb-3"></i>
                <h4>No Transactions Found</h4>
                <p class="text-muted mb-3">This portfolio doesn't have any transactions yet.</p>
                <button class="btn btn-primary">
                    <i class="fas fa-plus me-2"></i>Add Your First Transaction
                </button>
            </div>
        </div>
    }
    else
    {
        <!-- Transaction Table -->
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Transactions (@transactions.Count)</h5>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Date</th>
                                <th>Symbol</th>
                                <th>Type</th>
                                <th class="text-end">Quantity</th>
                                <th class="text-end">Price</th>
                                <th class="text-end">Total</th>
                                <th class="text-end">Fees</th>
                                <th>Notes</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var transaction in transactions)
                            {
                                <tr>
                                    <td>
                                        <div>
                                            <div class="fw-bold">@transaction.TransactionDate.ToString("MMM dd, yyyy")</div>
                                            <small class="text-muted">@transaction.TransactionDate.ToString("HH:mm")</small>
                                        </div>
                                    </td>
                                    <td>
                                        <div>
                                            <div class="fw-bold">@transaction.Symbol</div>
                                            <small class="text-muted">@transaction.CompanyName</small>
                                        </div>
                                    </td>
                                    <td>
                                        <span class="badge @(transaction.Type == "BUY" ? "bg-success" : "bg-danger")">
                                            @transaction.Type
                                        </span>
                                    </td>
                                    <td class="text-end">
                                        <strong>@transaction.Quantity.ToString("N0")</strong>
                                    </td>
                                    <td class="text-end">
                                        <strong>@transaction.Price.ToString("C2")</strong>
                                    </td>
                                    <td class="text-end">
                                        <strong>@transaction.TotalAmount.ToString("C2")</strong>
                                    </td>
                                    <td class="text-end">
                                        @if (transaction.Fees > 0)
                                        {
                                            <span class="text-muted">@transaction.Fees.ToString("C2")</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">--</span>
                                        }
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(transaction.Notes))
                                        {
                                            <span title="@transaction.Notes">@transaction.Notes</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">--</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm" role="group">
                                            <button type="button" class="btn btn-outline-primary btn-sm" title="View Details">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                            <button type="button" class="btn btn-outline-danger btn-sm" title="Delete">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Pagination -->
        @if (totalPages > 1)
        {
            <div class="row mt-4">
                <div class="col-12">
                    <nav aria-label="Transaction pagination">
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(currentPage <= 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => LoadPage(currentPage - 1)" disabled="@(currentPage <= 1)">
                                    <i class="fas fa-chevron-left"></i>
                                </button>
                            </li>

                            @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                            {
                                <li class="page-item @(i == currentPage ? "active" : "")">
                                    <button class="page-link" @onclick="() => LoadPage(i)">@i</button>
                                </li>
                            }

                            <li class="page-item @(currentPage >= totalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => LoadPage(currentPage + 1)" disabled="@(currentPage >= totalPages)">
                                    <i class="fas fa-chevron-right"></i>
                                </button>
                            </li>
                        </ul>
                    </nav>

                    <div class="text-center text-muted">
                        Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, totalRecords) of @totalRecords transactions
                    </div>
                </div>
            </div>
        }
    }
</div>

<style>
    .table th {
        border-top: none;
        font-weight: 600;
        white-space: nowrap;
    }

    .btn-group-sm .btn {
        padding: 0.25rem 0.4rem;
    }
</style>

@code {
    [Parameter] public int PortfolioId { get; set; }

    private bool isLoading = true;
    private List<TransactionDto>? transactions;
    private string portfolioName = "";

    // Pagination
    private int currentPage = 1;
    private int pageSize = 20;
    private int totalPages = 1;
    private int totalRecords = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadPortfolioName();
        await LoadTransactions();
    }

    private async Task LoadPortfolioName()
    {
        try
        {
            var portfolio = await PortfolioService.GetPortfolioAsync(PortfolioId);
            portfolioName = portfolio?.Name ?? "Unknown Portfolio";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading portfolio name: {ex.Message}");
            portfolioName = "Portfolio";
        }
    }

    private async Task LoadTransactions()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var result = await PortfolioService.GetPortfolioTransactionsAsync(PortfolioId, currentPage, pageSize);
            transactions = result.Data;
            totalPages = result.TotalPages;
            totalRecords = result.TotalRecords;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading transactions: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadPage(int page)
    {
        if (page >= 1 && page <= totalPages && page != currentPage)
        {
            currentPage = page;
            await LoadTransactions();
        }
    }

    private async Task RefreshData()
    {
        await LoadTransactions();
    }
}