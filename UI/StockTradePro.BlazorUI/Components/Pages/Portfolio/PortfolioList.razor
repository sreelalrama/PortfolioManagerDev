@page "/portfolios"
@using StockTradePro.BlazorUI.Models.Portfolio
@using StockTradePro.BlazorUI.Services
@inject IPortfolioService PortfolioService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Portfolios - StockTradePro</PageTitle>

<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h2 mb-1">
                        <i class="fas fa-briefcase me-2 text-primary"></i>My Portfolios
                    </h1>
                    <p class="text-muted mb-0">Manage and track your investment portfolios</p>
                </div>
                <div>
                    <button type="button" class="btn btn-outline-secondary me-2" @onclick="RefreshData">
                        <i class="fas fa-sync-alt me-1"></i>Refresh
                    </button>
                    <button type="button" class="btn btn-primary" @onclick="CreatePortfolio">
                        <i class="fas fa-plus me-1"></i>Create Portfolio
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Portfolio Summary Cards -->
    @if (portfolios?.Any() == true)
    {
        <div class="row mb-4">
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card bg-primary text-white">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h4 class="card-title">@portfolios.Count</h4>
                                <p class="card-text">Total Portfolios</p>
                            </div>
                            <i class="fas fa-briefcase fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card bg-success text-white">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h4 class="card-title">@totalValue.ToString("C0")</h4>
                                <p class="card-text">Total Value</p>
                            </div>
                            <i class="fas fa-dollar-sign fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card @(totalGainLoss >= 0 ? "bg-success" : "bg-danger") text-white">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h4 class="card-title">@totalGainLoss.ToString("C0")</h4>
                                <p class="card-text">Total Gain/Loss</p>
                            </div>
                            <i class="fas @(totalGainLoss >= 0 ? "fa-arrow-up" : "fa-arrow-down") fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card bg-info text-white">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h4 class="card-title">@totalHoldings</h4>
                                <p class="card-text">Total Holdings</p>
                            </div>
                            <i class="fas fa-chart-pie fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading portfolios...</span>
            </div>
            <p class="mt-2 text-muted">Loading your portfolios...</p>
        </div>
    }
    else if (portfolios?.Any() != true)
    {
        <!-- Empty State -->
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-body text-center py-5">
                        <i class="fas fa-briefcase fa-4x text-muted mb-4"></i>
                        <h3 class="mb-3">No Portfolios Yet</h3>
                        <p class="text-muted mb-4">
                            Create your first portfolio to start tracking your investments and building wealth.
                        </p>
                        <button class="btn btn-primary btn-lg" @onclick="CreatePortfolio">
                            <i class="fas fa-plus me-2"></i>Create Your First Portfolio
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Portfolio Grid -->
        <div class="row">
            @foreach (var portfolio in portfolios)
            {
                <div class="col-lg-6 col-xl-4 mb-4">
                    <div class="card portfolio-card h-100" @onclick="() => ViewPortfolio(portfolio.Id)">
                        <div class="card-body">
                            <!-- Portfolio Header -->
                            <div class="d-flex justify-content-between align-items-start mb-3">
                                <div>
                                    <h5 class="card-title mb-1">@portfolio.Name</h5>
                                    <small class="text-muted">@portfolio.Type • @portfolio.TotalHoldings holdings</small>
                                </div>
                                <div class="dropdown" @onclick:stopPropagation="true">
                                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                        <i class="fas fa-ellipsis-v"></i>
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li>
                                            <button class="dropdown-item" @onclick="() => ViewPortfolio(portfolio.Id)">
                                                <i class="fas fa-eye me-2"></i>View Details
                                            </button>
                                        </li>
                                        <li>
                                            <button class="dropdown-item" @onclick="() => EditPortfolio(portfolio.Id)">
                                                <i class="fas fa-edit me-2"></i>Edit
                                            </button>
                                        </li>
                                        <li>
                                            <button class="dropdown-item" @onclick="() => AddTransaction(portfolio.Id)">
                                                <i class="fas fa-plus me-2"></i>Add Transaction
                                            </button>
                                        </li>
                                        <li><hr class="dropdown-divider"></li>
                                        <li>
                                            <button class="dropdown-item text-danger" @onclick="() => DeletePortfolio(portfolio.Id)">
                                                <i class="fas fa-trash me-2"></i>Delete
                                            </button>
                                        </li>
                                    </ul>
                                </div>
                            </div>

                            <!-- Portfolio Value -->
                            <div class="mb-3">
                                <div class="h4 mb-1">@portfolio.CurrentValue.ToString("C2")</div>
                                <div class="d-flex align-items-center">
                                    <span class="@(portfolio.TotalGainLoss >= 0 ? "text-success" : "text-danger") me-2">
                                        <i class="fas @(portfolio.TotalGainLoss >= 0 ? "fa-arrow-up" : "fa-arrow-down") me-1"></i>
                                        @portfolio.TotalGainLoss.ToString("C2")
                                    </span>
                                    <span class="@(portfolio.TotalGainLossPercent >= 0 ? "text-success" : "text-danger") small">
                                        (@portfolio.TotalGainLossPercent.ToString("F2")%)
                                    </span>
                                </div>
                            </div>

                            <!-- Performance Indicator -->
                            <div class="progress mb-3" style="height: 6px;">
                                <div class="progress-bar @(portfolio.TotalGainLossPercent >= 0 ? "bg-success" : "bg-danger")"
                                     style="width: @Math.Min(Math.Abs(portfolio.TotalGainLossPercent) * 2, 100)%"></div>
                            </div>

                            <!-- Portfolio Stats -->
                            <div class="row text-center small">
                                <div class="col-4">
                                    <div class="text-muted">Last Updated</div>
                                    <div class="fw-bold">@portfolio.LastCalculatedAt.ToString("MMM dd")</div>
                                </div>
                                <div class="col-4">
                                    <div class="text-muted">Holdings</div>
                                    <div class="fw-bold">@portfolio.TotalHoldings</div>
                                </div>
                                <div class="col-4">
                                    <div class="text-muted">Type</div>
                                    <div class="fw-bold">@portfolio.Type</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Pagination -->
        @if (totalPages > 1)
        {
            <div class="row mt-4">
                <div class="col-12">
                    <nav aria-label="Portfolio pagination">
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(currentPage <= 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => LoadPage(currentPage - 1)" disabled="@(currentPage <= 1)">
                                    <i class="fas fa-chevron-left"></i>
                                </button>
                            </li>

                            @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                            {
                                <li class="page-item @(i == currentPage ? "active" : "")">
                                    <button class="page-link" @onclick="() => LoadPage(i)">@i</button>
                                </li>
                            }

                            <li class="page-item @(currentPage >= totalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => LoadPage(currentPage + 1)" disabled="@(currentPage >= totalPages)">
                                    <i class="fas fa-chevron-right"></i>
                                </button>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>
        }
    }
</div>

<style>
    .portfolio-card {
        cursor: pointer;
        transition: all 0.3s ease;
        border: 1px solid #e9ecef;
    }

        .portfolio-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            border-color: #007bff;
        }

    .progress {
        background-color: #f8f9fa;
    }

    .dropdown-toggle::after {
        display: none;
    }
</style>

@code {
    private bool isLoading = true;
    private List<PortfolioSummaryDto>? portfolios;
    private int currentPage = 1;
    private int pageSize = 9;
    private int totalPages = 1;

    // Summary stats
    private double totalValue = 0;
    private double totalGainLoss = 0;
    private int totalHoldings = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadPortfolios();
    }

    private async Task LoadPortfolios()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var result = await PortfolioService.GetPortfoliosAsync(currentPage, pageSize);
            portfolios = result.Data;
            totalPages = result.TotalPages;

            // Calculate totals
            if (portfolios?.Any() == true)
            {
                totalValue = portfolios.Sum(p => p.CurrentValue);
                totalGainLoss = portfolios.Sum(p => p.TotalGainLoss);
                totalHoldings = portfolios.Sum(p => p.TotalHoldings);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading portfolios: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadPage(int page)
    {
        if (page >= 1 && page <= totalPages && page != currentPage)
        {
            currentPage = page;
            await LoadPortfolios();
        }
    }

    private async Task RefreshData()
    {
        await LoadPortfolios();
    }

    private void CreatePortfolio()
    {
        Navigation.NavigateTo("/portfolios/create");
    }

    private void ViewPortfolio(int portfolioId)
    {
        Navigation.NavigateTo($"/portfolios/{portfolioId}");
    }

    private void EditPortfolio(int portfolioId)
    {
        Navigation.NavigateTo($"/portfolios/{portfolioId}/edit");
    }

    private void AddTransaction(int portfolioId)
    {
        Navigation.NavigateTo($"/portfolios/{portfolioId}/transactions/add");
    }

    private async Task DeletePortfolio(int portfolioId)
    {
        if (await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this portfolio? This action cannot be undone."))
        {
            try
            {
                var success = await PortfolioService.DeletePortfolioAsync(portfolioId);
                if (success)
                {
                    await LoadPortfolios();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting portfolio: {ex.Message}");
            }
        }
    }
}