@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JS

<div class="modal fade" id="registerModal" tabindex="-1" aria-labelledby="registerModalLabel" aria-hidden="true">
<div class="modal-dialog modal-dialog-centered">
<!-- Replicating the 'login-card' aesthetics using custom and Bootstrap classes -->
<div class="modal-content register-card">
<div class="modal-header register-header">
<h2 id="registerModalLabel" class="h4">Create an Account</h2>
<!-- Bootstrap close button -->
<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="HandleCancel"></button>
</div>
<div class="modal-body">

            <!-- Blazor EditForm for validation -->
            <EditForm Model="@registrationModel" OnValidSubmit="@HandleValidSubmit" FormName="RegistrationForm">
                <DataAnnotationsValidator />

                <!-- Name Fields (First and Last) side by side on large screens -->
                <div class="row">
                    <!-- First Name Field -->
                    <div class="col-md-6 mb-4">
                        <label for="firstName" class="form-label register-label">First Name</label>
                        <InputText id="firstName"
                                   class="form-control register-input"
                                   @bind-Value="registrationModel.FirstName"
                                   placeholder="Enter your first name"
                                   autocomplete="given-name" />
                        <ValidationMessage For="@(() => registrationModel.FirstName)" class="validation-message" />
                    </div>

                    <!-- Last Name Field -->
                    <div class="col-md-6 mb-4">
                        <label for="lastName" class="form-label register-label">Last Name</label>
                        <InputText id="lastName"
                                   class="form-control register-input"
                                   @bind-Value="registrationModel.LastName"
                                   placeholder="Enter your last name"
                                   autocomplete="family-name" />
                        <ValidationMessage For="@(() => registrationModel.LastName)" class="validation-message" />
                    </div>
                </div>

                <!-- Phone Number Field -->
                <div class="mb-4">
                    <label for="phoneNumber" class="form-label register-label">Phone Number</label>
                    <InputText id="phoneNumber"
                               type="tel"
                               class="form-control register-input"
                               @bind-Value="registrationModel.PhoneNumber"
                               placeholder="Enter your phone number"
                               autocomplete="tel" />
                    <ValidationMessage For="@(() => registrationModel.PhoneNumber)" class="validation-message" />
                </div>

                <!-- Email Address Field -->
                <div class="mb-4">
                    <label for="email" class="form-label register-label">Email Address</label>
                    <InputText id="email"
                               type="email"
                               class="form-control register-input"
                               @bind-Value="registrationModel.Email"
                               placeholder="Enter your email"
                               autocomplete="email" />
                    <ValidationMessage For="@(() => registrationModel.Email)" class="validation-message" />
                </div>

                <!-- Password Field -->
                <div class="mb-4">
                    <label for="password" class="form-label register-label">Password</label>
                    <InputText id="password"
                               type="password"
                               class="form-control register-input"
                               @bind-Value="registrationModel.Password"
                               placeholder="Create a password (min 6 chars)"
                               autocomplete="new-password" />
                    <ValidationMessage For="@(() => registrationModel.Password)" class="validation-message" />
                </div>

                <!-- Confirm Password Field -->
                <div class="mb-4">
                    <label for="confirmPassword" class="form-label register-label">Confirm Password</label>
                    <InputText id="confirmPassword"
                               type="password"
                               class="form-control register-input"
                               @bind-Value="registrationModel.ConfirmPassword"
                               placeholder="Confirm your password"
                               autocomplete="new-password" />
                    <ValidationMessage For="@(() => registrationModel.ConfirmPassword)" class="validation-message" />
                </div>

                <!-- Terms and Conditions Checkbox -->
                <div class="mb-4 form-check checkbox-group">
                    <InputCheckbox id="acceptTerms" class="form-check-input" @bind-Value="registrationModel.AcceptTerms" />
                    <label class="form-check-label register-label" for="acceptTerms">
                        I agree to the <a href="#" class="link text-decoration-none">Terms and Conditions</a>
                    </label>
                    <ValidationMessage For="@(() => registrationModel.AcceptTerms)" class="validation-message d-block mt-1" />
                </div>

                <!-- Error Message Display -->
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                    </div>
                }

                <!-- Form Actions (Submit Button) -->
                <div class="form-actions mt-4">
                    <button type="submit" class="btn btn-primary btn-primary-gradient w-100" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            <span>Registering...</span>
                        }
                        else
                        {
                            <span>Register Account</span>
                        }
                    </button>
                </div>
            </EditForm>

            <!-- Form Footer -->
            <div class="form-footer text-center pt-4 mt-4 border-top">
                <div class="signup-link">
                    Already have an account? <a href="/login" class="link text-decoration-none">Sign in</a>
                </div>
            </div>
        </div>
    </div>
</div>

</div>

<style>
/* Custom styles to match the aesthetic of the original component (shadow, font, button gradient) /
.register-card {
background: white;
border-radius: 12px;
box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
padding: 40px;
width: 100%;
max-width: 450px; / Slightly wider for the extra fields */
border: none;
}

.modal-dialog {
max-width: 450px;
}

.register-header {
text-align: center;
padding-bottom: 0;
border-bottom: none;
position: relative;
}

.register-header h2 {
color: #1f2937;
font-weight: 700;
margin: 0;
}

.register-label {
display: block;
font-weight: 600;
color: #374151;
margin-bottom: 8px;
font-size: 14px;
}

.register-input {
padding: 12px 16px;
border: 2px solid #e5e7eb;
border-radius: 8px;
font-size: 16px;
transition: border-color 0.2s, box-shadow 0.2s;
}

.register-input:focus {
border-color: #667eea;
box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.btn-primary-gradient {
/* Replicating the gradient from the original component */
background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
color: white;
padding: 14px 24px;
border: none;
border-radius: 8px;
font-weight: 600;
transition: all 0.2s;
}

.btn-primary-gradient:hover:not(:disabled) {
transform: translateY(-1px);
box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
background: linear-gradient(135deg, #5a67d8 0%, #683a91 100%); /* Slightly darker hover */
}

.validation-message {
color: #dc2626;
font-size: 12px;
margin-top: 4px;
display: block; /* Ensure it takes a new line */
}

.form-check-input:checked {
background-color: #667eea;
border-color: #667eea;
}

.link {
color: #667eea;
font-weight: 500;
transition: color 0.2s;
}

.link:hover {
color: #5a67d8;
}

/* Adjusting mobile padding */
@@media (max-width: 576px) {
.register-card {
padding: 24px;
}
}

</style>

@code 
{
// --- DTO/Model Definition (Adjusted to match the new fields) ---
public class UserRegistrationDto
{
[Required(ErrorMessage = "First Name is required")]
public string FirstName { get; set; } = string.Empty;

    [Required(ErrorMessage = "Last Name is required")]
    public string LastName { get; set; } = string.Empty;

    [Required(ErrorMessage = "Phone Number is required")]
    [Phone(ErrorMessage = "Please enter a valid phone number")]
    public string PhoneNumber { get; set; } = string.Empty;

    [Required(ErrorMessage = "Email is required")]
    [EmailAddress(ErrorMessage = "Please enter a valid email address")]
    public string Email { get; set; } = string.Empty;

    [Required(ErrorMessage = "Password is required")]
    [MinLength(6, ErrorMessage = "Password must be at least 6 characters long")]
    public string Password { get; set; } = string.Empty;

    [Required(ErrorMessage = "Password confirmation is required")]
    [Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
    public string ConfirmPassword { get; set; } = string.Empty;

    [Range(typeof(bool), "true", "true", ErrorMessage = "You must accept the terms")]
    public bool AcceptTerms { get; set; }
}

private UserRegistrationDto registrationModel = new();
private string errorMessage = string.Empty;
private bool isLoading = false;

// --- Component Parameters (for reusability) ---

// EventCallback to notify the parent component of success
[Parameter]
public EventCallback OnRegistrationSuccess { get; set; }

// EventCallback to notify the parent component of cancellation
[Parameter]
public EventCallback OnCancel { get; set; }

// --- Logic Implementation ---

private async Task HandleValidSubmit()
{
    isLoading = true;
    errorMessage = string.Empty;

    try
    {
        // In a real application, you would call your API service here:
        // await authService.Register(registrationModel);
        await SimulateRegistrationApiCall();

        // Notify the parent component of success
        await OnRegistrationSuccess.InvokeAsync();
    }
    catch (Exception ex)
    {
        // Set user-friendly error message based on exception
        errorMessage = "Registration failed. " + ex.Message;
        Console.WriteLine($"Registration error: {ex.Message}");
    }
    finally
    {
        isLoading = false;
    }
}

private async Task SimulateRegistrationApiCall()
{
    // Simulate network delay
    await Task.Delay(1500);

    // Simulated registration failure (e.g., email already exists check)
    if (registrationModel.Email.Contains("fail"))
    {
        throw new Exception("The specified email address is already in use.");
    }
    
    // Simulated successful registration
    Console.WriteLine($"User registered: {registrationModel.Email}");
}

private async Task HandleCancel()
{
    // Close the modal (requires JS interop if it's a true Bootstrap modal)
    await JS.InvokeVoidAsync("hideBootstrapModal", "registerModal");
    
    // Reset the form model and state (optional but good practice)
    registrationModel = new UserRegistrationDto(); 
    errorMessage = string.Empty;

    // Notify the parent of the cancellation
    await OnCancel.InvokeAsync();
}
}