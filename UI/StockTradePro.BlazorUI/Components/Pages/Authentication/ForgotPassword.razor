@using StockTradePro.BlazorUI.Models.Auth
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JS
@inject IAuthService AuthService

<div class="modal fade" id="forgotPasswordModal" tabindex="-1" aria-labelledby="forgotPasswordModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content forgot-password-card">
            <div class="modal-header forgot-password-header">
                <div class="text-center w-100">
                    <h2 id="forgotPasswordModalLabel">Reset Your Password</h2>
                    <p class="mb-0">Enter your email address and we'll send you a link to reset your password</p>
                </div>
                <button type="button" class="btn-close" @onclick="HandleCancel"></button>
            </div>
            <div class="modal-body">
                @if (!emailSent)
                {
                    <EditForm Model="@forgotPasswordModel" OnValidSubmit="@HandleValidSubmit" FormName="ForgotPasswordForm">
                        <DataAnnotationsValidator />

                        <div class="form-group">
                            <label for="email" class="form-label">Email Address</label>
                            <InputText id="email"
                                       class="form-control"
                                       @bind-Value="forgotPasswordModel.Email"
                                       placeholder="Enter your email address"
                                       autocomplete="email" />
                            <ValidationMessage For="@(() => forgotPasswordModel.Email)" class="validation-message" />
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">
                                @errorMessage
                            </div>
                        }

                        <div class="form-actions">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner"></span>
                                    <span>Sending...</span>
                                }
                                else
                                {
                                    <span>Send Reset Link</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                }
                else
                {
                    <!-- Success Message -->
                    <div class="success-container text-center">
                        <div class="success-icon mb-3">
                            <i class="fas fa-check-circle"></i>
                        </div>
                        <h4 class="success-title">Check Your Email</h4>
                        <p class="success-message mb-4">
                            We've sent a password reset link to <strong>@forgotPasswordModel.Email</strong>
                        </p>
                        <p class="text-muted small mb-4">
                            If you don't see the email, check your spam folder or
                            <button type="button" class="btn-link p-0" @onclick="ResetForm">try again</button>.
                        </p>
                        <div class="success-actions">
                            <button type="button" class="btn btn-outline-primary me-2" @onclick="ShowLoginModal">
                                <i class="fas fa-arrow-left me-1"></i>Back to Login
                            </button>
                            <button type="button" class="btn btn-primary" @onclick="HandleCancel">
                                <i class="fas fa-times me-1"></i>Close
                            </button>
                        </div>
                    </div>
                }

                <!-- Footer Links -->
                <div class="form-footer">
                    @if (!emailSent)
                    {
                        <div class="text-center">
                            <span class="text-muted">Remember your password? </span>
                            <button type="button" class="btn-link" @onclick="ShowLoginModal">Sign in</button>
                        </div>
                        <div class="text-center mt-2">
                            <span class="text-muted">Don't have an account? </span>
                            <button type="button" class="btn-link" @onclick="ShowRegisterModal">Sign up</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .forgot-password-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        padding: 40px;
        width: 100%;
        max-width: 450px;
        border: none;
    }

    .modal-dialog {
        max-width: 450px;
    }

    .forgot-password-header {
        text-align: center;
        margin-bottom: 0px;
        padding-bottom: 0px;
        border-bottom: none;
        position: relative;
    }

        .forgot-password-header h2 {
            color: #1f2937;
            font-size: 28px;
            font-weight: 700;
            margin: 0;
        }

        .forgot-password-header p {
            color: #6b7280;
            font-size: 14px;
            margin: 8px 0 0 0;
            line-height: 1.4;
        }

    .modal-header .btn-close {
        position: absolute;
        right: 15px;
        top: 15px;
        z-index: 1000;
    }

    .modal-body {
        padding-top: 20px;
    }

    .form-group {
        margin-bottom: 24px;
    }

    .form-label {
        display: block;
        font-weight: 600;
        color: #374151;
        margin-bottom: 8px;
        font-size: 14px;
    }

    .form-control {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        font-size: 16px;
        transition: border-color 0.2s, box-shadow 0.2s;
        box-sizing: border-box;
    }

        .form-control:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

    .validation-message {
        color: #dc2626;
        font-size: 12px;
        margin-top: 4px;
        display: block;
    }

    .alert {
        padding: 12px 16px;
        border-radius: 8px;
        margin-bottom: 20px;
        font-size: 14px;
    }

    .alert-danger {
        background-color: #fef2f2;
        border: 1px solid #fecaca;
        color: #dc2626;
    }

    .form-actions {
        margin-bottom: 24px;
    }

    .btn {
        padding: 14px 24px;
        border: none;
        border-radius: 8px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        text-decoration: none;
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        width: 100%;
    }

        .btn-primary:hover:not(:disabled) {
            transform: translateY(-1px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        }

    .btn-outline-primary {
        background: transparent;
        color: #667eea;
        border: 2px solid #667eea;
    }

        .btn-outline-primary:hover {
            background: #667eea;
            color: white;
            transform: translateY(-1px);
        }

    .btn:disabled {
        opacity: 0.7;
        cursor: not-allowed;
    }

    .btn-link {
        background: none;
        border: none;
        color: #667eea;
        text-decoration: none;
        font-weight: 500;
        font-size: inherit;
        cursor: pointer;
        padding: 0;
        transition: color 0.2s;
    }

        .btn-link:hover {
            color: #5a67d8;
            text-decoration: underline;
        }

    .spinner {
        width: 16px;
        height: 16px;
        border: 2px solid transparent;
        border-top: 2px solid currentColor;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }

    /* Success State Styles */
    .success-container {
        padding: 20px 0;
    }

    .success-icon {
        font-size: 4rem;
        color: #28a745;
    }

    .success-title {
        color: #1f2937;
        font-size: 24px;
        font-weight: 700;
        margin-bottom: 16px;
    }

    .success-message {
        color: #374151;
        font-size: 16px;
        line-height: 1.5;
    }

    .success-actions {
        display: flex;
        gap: 12px;
        justify-content: center;
        flex-wrap: wrap;
    }

        .success-actions .btn {
            width: auto;
            min-width: 120px;
        }

    .form-footer {
        text-align: center;
        border-top: 1px solid #e5e7eb;
        padding-top: 24px;
        margin-top: 20px;
        color: #6b7280;
        font-size: 14px;
    }

    /* Mobile responsiveness */
    @@media (max-width: 480px) {
        .forgot-password-card {
            padding: 24px;
        }

        .forgot-password-header h2 {
            font-size: 24px;
        }

        .forgot-password-header p {
            font-size: 13px;
        }

        .success-icon {
            font-size: 3rem;
        }

        .success-title {
            font-size: 20px;
        }

        .success-actions {
            flex-direction: column;
        }

            .success-actions .btn {
                width: 100%;
            }
    }

    /* Animation for success state */
    .success-container {
        animation: fadeInUp 0.5s ease-out;
    }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>

@code {
    // Event callbacks for navigation
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback OnShowLogin { get; set; }
    [Parameter] public EventCallback OnShowRegister { get; set; }

    // DTOs
    public class ValidatedForgotPasswordDto
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = string.Empty;
    }

    private ValidatedForgotPasswordDto forgotPasswordModel = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;
    private bool emailSent = false;

    private async Task HandleValidSubmit()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var forgotPasswordDto = new ForgotPasswordDto
            {
                Email = forgotPasswordModel.Email
            };

            var success = await AuthService.ForgotPasswordAsync(forgotPasswordDto);

            if (success)
            {
                emailSent = true;
            }
            else
            {
                errorMessage = "Failed to send reset email. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred. Please try again later.";
            Console.WriteLine($"Forgot password error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleCancel()
    {
        await ResetForm();
        await JS.InvokeVoidAsync("hideBootstrapModal", "forgotPasswordModal");
        await OnCancel.InvokeAsync();
    }

    private async Task ShowLoginModal()
    {
        await ResetForm();
        await JS.InvokeVoidAsync("hideBootstrapModal", "forgotPasswordModal");
        await OnShowLogin.InvokeAsync();
    }

    private async Task ShowRegisterModal()
    {
        await ResetForm();
        await JS.InvokeVoidAsync("hideBootstrapModal", "forgotPasswordModal");
        await OnShowRegister.InvokeAsync();
    }

    private async Task ResetForm()
    {
        forgotPasswordModel = new ValidatedForgotPasswordDto();
        errorMessage = string.Empty;
        isLoading = false;
        emailSent = false;
        StateHasChanged();
        await Task.CompletedTask;
    }

    // Public method to show the modal
    public async Task ShowAsync()
    {
        await ResetForm();
        await JS.InvokeVoidAsync("showBootstrapModal", "forgotPasswordModal");
    }

    // Public method to hide the modal
    public async Task HideAsync()
    {
        await JS.InvokeVoidAsync("hideBootstrapModal", "forgotPasswordModal");
    }
}