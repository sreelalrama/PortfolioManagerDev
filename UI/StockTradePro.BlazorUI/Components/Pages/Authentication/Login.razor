@using StockTradePro.BlazorUI.Models.Auth
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JS

<div class="modal fade" id="loginModal" tabindex="-1" aria-labelledby="loginModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content login-card">
            <div class="modal-header login-header">
                <h2>SignIn</h2>
                <button type="button" class="btn-close" @onclick="HandleCancel"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="@loginModel" OnValidSubmit="@HandleValidSubmit" FormName="LoginForm">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="email" class="form-label">Email Address</label>
                        <InputText id="email"
                                   class="form-control"
                                   @bind-Value="loginModel.Email"
                                   placeholder="Enter your email"
                                   autocomplete="email" />
                        <ValidationMessage For="@(() => loginModel.Email)" class="validation-message" />
                    </div>

                    <div class="form-group">
                        <label for="password" class="form-label">Password</label>
                        <InputText id="password"
                                   type="password"
                                   class="form-control"
                                   @bind-Value="loginModel.Password"
                                   placeholder="Enter your password"
                                   autocomplete="current-password" />
                        <ValidationMessage For="@(() => loginModel.Password)" class="validation-message" />
                    </div>

                    <div class="form-group checkbox-group">
                        <label class="checkbox-label">
                            <InputCheckbox @bind-Value="loginModel.RememberMe" />
                            <span class="checkmark"></span>
                            Remember me
                        </label>
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">
                            @errorMessage
                        </div>
                    }

                    <div class="form-actions">
                        <button type="submit" class="btn btn-primary" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner"></span>
                                <span>Signing in...</span>
                            }
                            else
                            {
                                <span>Sign In</span>
                            }
                        </button>
                    </div>
                </EditForm>
                <div class="form-footer">
                    <!-- UPDATED: Changed from <a> tag to button for modal navigation -->
                    <button type="button" class="btn-link forgot-link" @onclick="ShowForgotPasswordModal">
                        Forgot your password?
                    </button>
                    <div class="signup-link">
                        Don't have an account?
                        <button type="button" class="btn-link" @onclick="ShowRegisterModal">Sign up</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    /* The original .login-container and its background are removed
                to make the component a true modal, not a full-page view.
                The styling for the login-card is now directly applied to the modal-content.
                */
    .login-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        padding: 40px;
        width: 100%;
        max-width: 400px;
        border: none;
    }

    .modal-dialog {
        max-width: 400px;
    }

    .login-header {
        text-align: center;
        margin-bottom: 0px;
        padding-bottom: 0px;
        border-bottom: none;
        position: relative;
    }

        .login-header h2 {
            color: #1f2937;
            font-size: 28px;
            font-weight: 700;
            margin: 0;
        }

        .login-header p {
            color: #6b7280;
            font-size: 14px;
            margin: 0;
        }

    .modal-header .btn-close {
        position: absolute;
        right: 15px;
        top: 15px;
        z-index: 1000;
    }

    .modal-body {
        padding-top: 0;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-label {
        display: block;
        font-weight: 600;
        color: #374151;
        margin-bottom: 8px;
        font-size: 14px;
    }

    .form-control {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        font-size: 16px;
        transition: border-color 0.2s, box-shadow 0.2s;
        box-sizing: border-box;
    }

        .form-control:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

    .checkbox-group {
        display: flex;
        align-items: center;
        margin-bottom: 24px;
    }

    .checkbox-label {
        display: flex;
        align-items: center;
        font-size: 14px;
        color: #374151;
        cursor: pointer;
        user-select: none;
    }

        .checkbox-label input[type="checkbox"] {
            margin-right: 8px;
            transform: scale(1.1);
        }

    .validation-message {
        color: #dc2626;
        font-size: 12px;
        margin-top: 4px;
        display: block;
    }

    .alert {
        padding: 12px 16px;
        border-radius: 8px;
        margin-bottom: 20px;
        font-size: 14px;
    }

    .alert-danger {
        background-color: #fef2f2;
        border: 1px solid #fecaca;
        color: #dc2626;
    }

    .form-actions {
        margin-bottom: 24px;
    }

    .btn {
        width: 100%;
        padding: 14px 24px;
        border: none;
        border-radius: 8px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

        .btn-primary:hover:not(:disabled) {
            transform: translateY(-1px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        }

    .btn:disabled {
        opacity: 0.7;
        cursor: not-allowed;
    }

    .spinner {
        width: 16px;
        height: 16px;
        border: 2px solid transparent;
        border-top: 2px solid currentColor;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }

    .form-footer {
        text-align: center;
        border-top: 1px solid #e5e7eb;
        padding-top: 24px;
        margin-top: 20px;
    }

        .form-footer .link {
            color: #667eea;
            text-decoration: none;
            font-weight: 500;
            font-size: 14px;
            transition: color 0.2s;
        }

            .form-footer .link:hover {
                color: #5a67d8;
                text-decoration: underline;
            }

    /* NEW: Button link styles for modal navigation */
    .btn-link {
        background: none;
        border: none;
        color: #667eea;
        text-decoration: none;
        font-weight: 500;
        font-size: 14px;
        cursor: pointer;
        padding: 0;
        transition: color 0.2s;
    }

        .btn-link:hover {
            color: #5a67d8;
            text-decoration: underline;
        }

    .forgot-link {
        display: block;
        margin-bottom: 12px;
    }

    .signup-link {
        margin-top: 12px;
        font-size: 14px;
        color: #6b7280;
    }

    /* Mobile responsiveness */
    @@media (max-width: 480px) {
        .login-card {
            padding: 24px;
        }

        .login-header h2 {
            font-size: 24px;
        }
    }
</style>

@code {
    // Existing event callbacks
    [Parameter]
    public EventCallback OnLoginSuccess { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    // NEW: Event callbacks for modal navigation
    [Parameter]
    public EventCallback OnShowForgotPassword { get; set; }

    [Parameter]
    public EventCallback OnShowRegister { get; set; }

    // DTOs
    public class ValidatedUserLoginDto
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters long")]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; }
    }

    private ValidatedUserLoginDto loginModel = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    private async Task HandleValidSubmit()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var userLoginDto = new UserLoginDto
            {
                Email = loginModel.Email,
                Password = loginModel.Password,
                RememberMe = loginModel.RememberMe
            };

            await AuthenticateUser(userLoginDto);

            // Notify the parent component of success
            await OnLoginSuccess.InvokeAsync();
        }
        catch (Exception ex)
        {
            errorMessage = "Invalid email or password. Please try again.";
            Console.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    // Method to handle user cancelling the login
    private async Task HandleCancel()
    {
        // Close the modal from a C# event.
        await JS.InvokeVoidAsync("hideBootstrapModal", "loginModal");

        // Notify the parent of the cancellation.
        await OnCancel.InvokeAsync();
    }

    // NEW: Modal navigation methods
    private async Task ShowForgotPasswordModal()
    {
        // Close current modal
        await JS.InvokeVoidAsync("hideBootstrapModal", "loginModal");

        // Small delay to ensure smooth transition
        await Task.Delay(150);

        // Trigger parent to show forgot password modal
        await OnShowForgotPassword.InvokeAsync();
    }

    private async Task ShowRegisterModal()
    {
        // Close current modal
        await JS.InvokeVoidAsync("hideBootstrapModal", "loginModal");

        // Small delay to ensure smooth transition
        await Task.Delay(150);

        // Trigger parent to show register modal
        await OnShowRegister.InvokeAsync();
    }

    private async Task AuthenticateUser(UserLoginDto loginDto)
    {
        // Simulate a successful API call after a delay
        await Task.Delay(1500);

        // Simulated authentication logic
        if (loginDto.Email != "demo@example.com" || loginDto.Password != "password123")
        {
            throw new Exception("Invalid credentials");
        }
    }
    public async Task ShowAsync()
    {
        loginModel = new ValidatedUserLoginDto();
        errorMessage = string.Empty;
        isLoading = false;
        StateHasChanged();
        await JS.InvokeVoidAsync("showBootstrapModal", "loginModal");
    }

}